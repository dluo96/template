# Configuration for building package
[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "PACKAGE NAME"
description = "PACKAGE DESCRIPTION"
readme = "README.md"
authors = [{name = "Daniel Luo", email = "dan.luo1996@gmail.com"}]
dependencies = [
    "torch >= 1.13.1"
]
requires-python = ">=3.9.16"
version = "0.6.8"

[tool.setuptools.packages]
find = {} # For more details about how to link packages see https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html

# Configuration for pre-commits
[tool.isort]
profile = "black"
py_version = 39
multi_line_output = 3  # How imports are formatted when they span multiple lines
include_trailing_comma = true
use_parentheses = true
line_length = 88

[tool.mypy]
python_version = 3.9
namespace_packages = true
incremental = false
cache_dir = ""
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true  # Flag unneeded type ignore statements
allow_redefinition = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false  # Allow decorators that convert a typed function into an untyped one
strict_optional = true
strict_equality = true
explicit_package_bases = true
follow_imports = "skip"

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "omegaconf.*",
    "pandas.*",
    "PIL.*",
    "pytest.*",
    "requests.*",
    "torchvision.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py39"  # Assume Python 3.9
select = [  # Enable a wide range of existing codes.
    "F", # Pyflakes
    "E", "W", # pycodestyle
    "UP", # pyupgrade
    "N", # pep8-naming
    "YTT", "ANN", "S", "BLE", "B", "A", "C4", "T10", "EM", "ISC", "ICN", "T20", "PT", "Q", "RET", "SIM", "TID", "ARG", "DTZ", "PIE", # flake8
    "PGH", # pygrep-hooks
    "RUF", # ruff
    "PLC", "PLE", "PLR", "PLW", # pylint
]
ignore = [
    "ANN002", # MissingTypeArgs
    "ANN003", # MissingTypeKwargs
    "ANN101", # MissingTypeSelf
    "ANN401", # Avoid "Dynamically typed expressions (typing.Any) are disallowed"
    "EM101", # Exception must not use a string literal, assign to variable first
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "RET504", # Unnecessary variable assignment before `return` statement
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "PLE0605", # Invalid format for `__all__`, must be `tuple` or `list`
    "PLR0912", # Too many branches
    "S113", # Avoid "Probable use of requests call without timeout"
    "N803", # Avoid "Argument name should be lowercase"
    "N806", # Avoid "Variable in function should be lowercase"
]

[tool.ruff.per-file-ignores]
"*_test.py" = [
    "S101"  # Using `assert` is fine in test files
]

[tool.ruff.pydocstyle]
convention = "google"  # Follow the Google Style Guide

[tool.ruff.pylint]
allow-magic-value-types = ["int", "str"]


[tool.semantic_release]
assets = []
commit_message = "Release: {version}\n\nAutomatically generated by REPO-bot with python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = false
tag_format = "v{version}"
version_toml = ["pyproject.toml:project.version"]
version_variables = ["MY_PACKAGE/__init__.py:__version__"]

[tool.semantic_release.branches.main]
match = "main"
prerelease = false
prerelease_token = "rc"

[tool.semantic_release.changelog]
changelog = "CHANGELOG.md"
exclude_commit_patterns = [
    "Merge branch '.*' into .*",
    "Release:.*Automatically generated by .*"
]
template_dir = "templates"

[tool.semantic_release.changelog.environment]
autoescape = true
block_end_string = "%}"
block_start_string = "{%"
comment_end_string = "#}"
comment_start_string = "{#"
extensions = []
keep_trailing_newline = false
lstrip_blocks = false
newline_sequence = "\n"
trim_blocks = false
variable_end_string = "}}"
variable_start_string = "{{"

[tool.semantic_release.commit_author]
default = "REPO-bot <REPO-bot@example.com>"
env = "GIT_COMMIT_AUTHOR"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
version_variable = "project.version"
upload_to_github = true
github_repository = "dluo96/REPOSITORY"


[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.remote.token]
env = "GH_TOKEN"  # Only needed for publishing release locally (as opposed to GitHub Actions). Use a GitHub Personal Access Token.

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
where = ["*.tsv*"]